import { readFile, writeFile } from 'node:fs/promises';
import { WorkSheet, read } from 'xlsx';
import { chunks } from './chunk.js';
import { fileURLToPath } from 'url';
import path, { dirname } from 'node:path';

const spreadsheet = await readFile('performance-data.xlsx');

const workbook = read(spreadsheet, { type: 'buffer' });

const sheets = Object.fromEntries(
	Object.entries(workbook.Sheets).filter(([key]) => key !== 'READ ME FIRST')
);

// We want functions that link pwm, current, and force
// as we want to work with *force* and be able to balance current.

const tupledData: Record<number, [pwm: number, current: number, force: number][]> = Object.fromEntries(Object.entries(sheets).map((a) =>
	a.map((x, i) => {
		if (i == 0) {
			return parseInt(x.replace(" V", ""));
		}

		const sheet = x as WorkSheet;

		const preparsedArray = Object.entries(sheet)
			// filtering for any actual cells (not any metadata)
			.filter(([k]) => k == k.toUpperCase())
			// selecting certain columns
			.filter(([k]) =>
				[
					'A', // pwm
					'C', // current
					'F' // force
				].includes(k[0])
			)
			// drop the first row
			.filter(([k]) => !(k.length === 2 && k.includes('1')))
			// trimming labels
			.map(([k, v]) => [k, typeof v.v === 'string' ? v.v.trim() : v.v]);

		// Chunk the array to turn into tuples { ax, cx, fx } => (a, c, f)
		return [...chunks(preparsedArray, 3)]
			.map(chunk => chunk.map(([_, v]) => v))
			// then preprocess the produced force/thrust (the final column)
			// where values below 1500 (the median) are negative -
			// thus indicating 'negative' force and forcing better one-to-one pairing
			.map(([pwm, current, force]) => [pwm, current, pwm <= 1500 ? -force : force]);
	})
));

const pwmInfo: Record<number, Record<number, [current: number, force: number]>> = Object.fromEntries(Object.entries(tupledData).map(([k, v]) => [
	k,
	Object.fromEntries(v.map(([pwm, current, force]) => [pwm, [current, force]]))
]));

const currentDirectory = dirname(fileURLToPath(import.meta.url));

const HEADER = `// AUTOGENERATED BY: thruster's \`pnpm run parse\` script.
// Please do not edit this file.
`

await writeFile(path.join(currentDirectory, '..', 'src', 'data', 'pwm.ts'), `${HEADER}export const fromPwmData = ${JSON.stringify(pwmInfo, null, '\t')};`, 'utf-8');
